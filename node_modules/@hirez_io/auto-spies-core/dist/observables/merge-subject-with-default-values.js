"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeSubjectWithDefaultValues = void 0;
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
function mergeSubjectWithDefaultValues(subject, valuesConfigs) {
    var onCompleteSubject = new rxjs_1.ReplaySubject(1);
    var results$ = rxjs_1.from(valuesConfigs).pipe(
    // Add delay to "complete" if needed
    operators_1.concatMap(function (valueConfig) {
        if ('complete' in valueConfig && valueConfig.complete && valueConfig.delay) {
            return rxjs_1.of(valueConfig).pipe(operators_1.delay(valueConfig.delay));
        }
        return rxjs_1.of(valueConfig);
    }), 
    // Complete if needed
    operators_1.takeWhile(function (valueConfig) {
        if (!('complete' in valueConfig)) {
            return true;
        }
        if (valueConfig.complete) {
            onCompleteSubject.next();
            return false;
        }
        return true;
    }), 
    // Handle regular values or errors
    operators_1.concatMap(function (valueConfig) {
        if ('value' in valueConfig && valueConfig.value) {
            if (valueConfig.delay) {
                return rxjs_1.of(valueConfig.value).pipe(operators_1.delay(valueConfig.delay));
            }
            return rxjs_1.of(valueConfig.value);
        }
        /* istanbul ignore else */
        if ('errorValue' in valueConfig && valueConfig.errorValue) {
            if (valueConfig.delay) {
                return rxjs_1.timer(valueConfig.delay).pipe(operators_1.switchMap(function () { return rxjs_1.throwError(valueConfig.errorValue); }));
            }
            return rxjs_1.throwError(valueConfig.errorValue);
        }
        /* istanbul ignore next */
        return rxjs_1.EMPTY;
    }));
    return rxjs_1.merge(results$, subject.pipe(operators_1.takeUntil(onCompleteSubject)));
}
exports.mergeSubjectWithDefaultValues = mergeSubjectWithDefaultValues;
//# sourceMappingURL=merge-subject-with-default-values.js.map