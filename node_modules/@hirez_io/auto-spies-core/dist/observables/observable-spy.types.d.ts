import { Subject } from 'rxjs';
import { ValueConfigPerCall } from '../auto-spies-core.types';
export declare type CreateObservableAutoSpy<LibSpecificFunctionSpy, LibSpecificFunctionSpyWithObservableMethods, ObservableReturnType> = LibSpecificFunctionSpy & LibSpecificFunctionSpyWithObservableMethods & AddCalledWithToObservableFunctionSpy<ObservableReturnType>;
export declare type AddCalledWithToObservableFunctionSpy<ObservableReturnType> = {
    calledWith(...args: any[]): AddObservableSpyMethods<ObservableReturnType>;
    mustBeCalledWith(...args: any[]): AddObservableSpyMethods<ObservableReturnType>;
};
export interface AddObservableSpyMethods<T> {
    nextWith(value?: T): void;
    nextOneTimeWith(value?: T): void;
    nextWithValues(valuesConfigs: ValueConfig<T>[]): void;
    nextWithPerCall(valuesPerCall?: ValueConfigPerCall<T>[]): Subject<T>[];
    throwWith(value: any): void;
    complete(): void;
    returnSubject(): Subject<T>;
}
export declare type ValueConfig<T> = NextValueConfig<T> | ErrorValueConfig | CompleteValueConfig;
export declare type NextValueConfig<T> = {
    value: T;
    delay?: number;
};
export declare type ErrorValueConfig = {
    errorValue: any;
    delay?: number;
};
export declare type CompleteValueConfig = {
    complete?: boolean;
    delay?: number;
};
