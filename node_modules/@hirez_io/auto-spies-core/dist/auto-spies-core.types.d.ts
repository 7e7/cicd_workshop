import { Observable } from 'rxjs';
export declare type Func = (...args: any[]) => any;
export declare type ClassType<T> = {
    new (...args: any[]): T;
    [key: string]: any;
};
export declare type CreateSyncAutoSpy<Method extends Func, LibSpecificFunctionSpy, LibSpecificFunctionSpyPlusCalledWith> = Method & LibSpecificFunctionSpy & LibSpecificFunctionSpyPlusCalledWith;
declare type StringKeysForPropertyType<ObjectType, PropType> = Extract<{
    [Key in keyof ObjectType]: ObjectType[Key] extends PropType ? Key : never;
}[keyof ObjectType], string>;
export declare type OnlyMethodKeysOf<T> = StringKeysForPropertyType<T, {
    (...args: any[]): any;
}>;
export declare type OnlyObservablePropsOf<T> = StringKeysForPropertyType<T, Observable<any>>;
export declare type GetObservableReturnType<OT> = OT extends Observable<infer OR> ? OR : never;
export declare type OnlyPropsOf<ObjectType> = Extract<{
    [Key in keyof ObjectType]: ObjectType[Key] extends Func ? never : Key;
}[keyof ObjectType], string>;
export declare type ValueConfigPerCall<T> = {
    value: T;
    delay?: number;
    doNotComplete?: boolean;
};
export declare type WrappedValueConfigPerCall<T = any> = {
    wrappedValue: Promise<T> | Observable<T>;
    delay?: number;
};
export {};
