/// <reference types="jest" />
import { Observable } from 'rxjs';
import { AddObservableSpyMethods, AddPromiseSpyMethods, Func, AddAccessorsSpies, CreateSyncAutoSpy, CreateObservableAutoSpy, CreatePromiseAutoSpy } from '@hirez_io/auto-spies-core';
export declare type Spy<ClassToSpyOn> = AddAutoSpies<ClassToSpyOn, jest.Mock> & AddAccessorsSpies<ClassToSpyOn, jest.Mock>;
declare type AddAutoSpies<ClassToSpyOn, LibSpecificFunctionSpy> = {
    [Key in keyof ClassToSpyOn]: ClassToSpyOn[Key] extends Func ? AddSpyMethodsByReturnTypes<ClassToSpyOn[Key], LibSpecificFunctionSpy> : ClassToSpyOn[Key] extends Observable<infer ObservableReturnType> ? ClassToSpyOn[Key] & AddObservableSpyMethods<ObservableReturnType> : ClassToSpyOn[Key];
};
export declare type AddSpyMethodsByReturnTypes<Method extends Func, LibSpecificFunctionSpy> = Method & (Method extends (...args: any[]) => infer ReturnType ? ReturnType extends Promise<infer PromiseReturnType> ? CreatePromiseAutoSpy<LibSpecificFunctionSpy, AddPromiseSpyMethods<PromiseReturnType>, PromiseReturnType> : ReturnType extends Observable<infer ObservableReturnType> ? CreateObservableAutoSpy<LibSpecificFunctionSpy, AddObservableSpyMethods<ObservableReturnType>, ObservableReturnType> : CreateSyncAutoSpy<Method, LibSpecificFunctionSpy, AddCalledWithToJestFunctionSpy> : never);
export interface AddCalledWithToJestFunctionSpy {
    calledWith(...args: any[]): {
        mockReturnValue: (value: any) => void;
    };
    mustBeCalledWith(...args: any[]): {
        mockReturnValue: (value: any) => void;
    };
}
export {};
